import { z } from "zod";
export const Deal = z.object({deal_id:z.string(),ask_price:z.number().positive(),expected_noi:z.number().nonnegative(),sector:z.string(),city:z.string(),risk_score:z.number().min(0).max(5).default(3),must_buy:z.boolean().default(false)});
export const DealPickerRequest = z.object({budget:z.number().positive(),objective:z.enum(["cash_yield","risk_adjusted"]),risk_penalty_per_point:z.number().min(0).default(0),max_assets:z.number().int().min(1).optional(),max_alloc_per_sector:z.record(z.number().min(0).max(1)).default({}),max_alloc_per_city:z.record(z.number().min(0).max(1)).default({}),allow_fractional_allocations:z.boolean().default(true),assumptions:z.record(z.number().min(0)).default({}),deals:z.array(Deal).min(1)});
export type DealPickerRequestT = z.infer<typeof DealPickerRequest>;
export const DealPickerResponse = z.object({portfolio_summary:z.object({capital_used:z.number().min(0),cash_yield:z.number().min(0),risk_adjusted_yield:z.number().min(0),num_assets_selected:z.number().int().min(0)}),asset_allocations:z.array(z.object({deal_id:z.string(),weight:z.number().min(0).max(1),capital:z.number().min(0),expected_noi:z.number().min(0)})),constraints_report:z.object({binding:z.array(z.object({name:z.string(),slack:z.number()})),shadow_prices:z.array(z.object({constraint:z.string(),unit:z.string(),marginal_value:z.number()}))}),what_if:z.array(z.object({change:z.string(),delta_cash_yield:z.string().optional(),delta_expected_12m_ncf:z.string().optional(),new_wault:z.number().nonnegative().optional()})).default([]),downloads:z.object({xlsx_plan:z.string().nullable().optional(),csv_allocations:z.string().nullable().optional()}).passthrough()});
export type DealPickerResponseT = z.infer<typeof DealPickerResponse>;
