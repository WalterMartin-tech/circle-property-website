version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: circle-property-db
    environment:
      POSTGRES_DB: circleproperty
      POSTGRES_USER: circle_admin
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dev_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - circle-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U circle_admin -d circleproperty"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: circle-property-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - circle-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-dev_redis_123}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: circle-property-api
    environment:
      NODE_ENV: development
      PORT: 8000
      DATABASE_URL: postgresql://circle_admin:${DB_PASSWORD:-dev_password_123}@postgres:5432/circleproperty
      REDIS_URL: redis://:${REDIS_PASSWORD:-dev_redis_123}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-dev_jwt_secret_key_123}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-me-south-1}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET:-circle-property-files}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      EMAIL_FROM: ${EMAIL_FROM:-noreply@circleproperty.ae}
    ports:
      - "8000:8000"
    volumes:
      - ./backend/src:/app/src
      - ./backend/prisma:/app/prisma
      - ./shared:/app/shared
    networks:
      - circle-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: npm run dev

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: circle-property-web
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:8000/api
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-dev_nextauth_secret_123}
      NEXTAUTH_URL: http://localhost:3000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./shared:/app/shared
    networks:
      - circle-network
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    command: npm run dev

  # Nginx Reverse Proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: circle-property-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./deployment/ssl:/etc/nginx/ssl
    networks:
      - circle-network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - production

  # Database Administration (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: circle-property-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@circleproperty.ae
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - circle-network
    depends_on:
      - postgres
    restart: unless-stopped
    profiles:
      - tools

networks:
  circle-network:
    driver: bridge
    name: circle-property-network

volumes:
  postgres_data:
    name: circle-property-postgres-data
  redis_data:
    name: circle-property-redis-data
  pgadmin_data:
    name: circle-property-pgadmin-data
